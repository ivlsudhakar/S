Year(created_at) as Year
from sales_flat_order
group by  Year
')
RevenueByYear=fetch(yearwiserevenue,n=-1)
##### Top Product Sold in March ####
ProductTop = dbSendQuery(mydb,'select sum(sales_flat_quote_item.qty) as TotalQty,
sales_flat_quote_item.product_id, sales_flat_quote_item.name
from sales_flat_quote_item,
sales_flat_order_item
where YEAR(sales_flat_quote_item.updated_at) = 2016 AND MONTH(sales_flat_quote_item.updated_at)=3 AND
sales_flat_quote_item.product_id = sales_flat_order_item.product_id
group by sales_flat_quote_item.product_id;')
topproduct= fetch(ProductTop, n=-1)
maxQty<-max(topproduct$TotalQty)
####inventory Turnover=Cost of Goods Sold  /  Average Inventory
turnover = dbSendQuery(mydb,'select sum(sales_flat_order.grand_total) as OrderTotal from
sales_flat_order,sales_flat_invoice
where
sales_flat_order.entity_id=sales_flat_invoice.order_id and
sales_flat_order.status="complete"')
Iturnover= fetch(turnover, n=-1)
inventurnover<-sum(Iturnover$OrderTotal)
###Revenue By Product Category
Rbycat=dbSendQuery(mydb,'SELECT sum(`qty`) as qty, sum(`total_price`) as Revenue, category_id FROM (SELECT sum(`qty_ordered`) as qty, sum(`row_total`) as total_price, sales_flat_order_item.product_id, catalog_category_product.category_id  FROM `sales_flat_order_item`
INNER JOIN catalog_category_product ON catalog_category_product.product_id = sales_flat_order_item.product_id
GROUP BY sales_flat_order_item.product_id order by catalog_category_product.category_id desc) as resTable GROUP BY category_id')
Rbycatval=fetch(Rbycat,n=-1)
######Inventory sales by location#####
Inventsales= dbSendQuery(mydb,'select sum(sales_flat_order.grand_total) as Revenue ,
sales_flat_order_address.region as Location,
(sales_flat_invoice.total_qty) as ordered_qunatity
from sales_flat_order,sales_flat_order_address,sales_flat_invoice
where sales_flat_order.entity_id=sales_flat_order_address.parent_id
and  sales_flat_order.entity_id=sales_flat_invoice.order_id
group by sales_flat_order_address.region')
InventsalesbyRegion = fetch(Inventsales, n=-1)
##### units per transaction of the month march  ########
TotalUnitSold = dbSendQuery(mydb,'select sum(sales_flat_invoice_item.qty) as TotalQty
from sales_flat_invoice_item,sales_flat_order,sales_flat_invoice
where YEAR(sales_flat_order.updated_at)=2016 and MONTH(sales_flat_order.updated_at)=3 and
sales_flat_order.entity_id = sales_flat_invoice.order_id and
sales_flat_invoice.entity_id=sales_flat_invoice_item.parent_id and
sales_flat_order.status="complete"')
TotalUnitsSold = fetch(TotalUnitSold, n=-1)
Transactions=dbSendQuery(mydb,'select count(*) from sales_flat_order where YEAR(updated_at)=2016 and MONTH(updated_at)=3 and status="complete";')
totalTransactions=fetch(Transactions,n=-1)
unitspertransaction<-TotalUnitsSold/totalTransactions
unitspertransaction<-round(unitspertransaction,2)
##### Visits per day ########
dVisits=dbSendQuery(mydb,"select count(*) from log_visitor where day(log_visitor.first_visit_at)=26 and month(log_visitor.first_visit_at)=3 and year(log_visitor.first_visit_at)=2016")
dVisitsperday=fetch(dVisits,n=-1)
runApp()
Avg_Value=round(Avg_Value,2)
runApp()
library(RMySQL)
library(shinydashboard)
library(shiny)
library(googleVis)
library(dplyr)
library(lubridate)
library(DT)
library(readr)
library(ggplot2)
mydb = dbConnect(MySQL(),user='readonly',password='readonly123',dbname='slcawdb',host='183.82.106.91')
#####
rs = dbSendQuery(mydb, 'select sales_flat_order.updated_at, sales_flat_order.store_id, sales_flat_order.status,
sales_flat_invoice.created_at, sales_flat_invoice.grand_total,
sales_flat_invoice_item.qty, sales_flat_invoice_item.name, sales_flat_invoice_item.price
from sales_flat_order,sales_flat_invoice,sales_flat_invoice_item
where sales_flat_order.entity_id=sales_flat_invoice.order_id
and  sales_flat_invoice_item.entity_id=sales_flat_invoice.entity_id
and sales_flat_order.status = "complete"')
data = fetch(rs, n=-1)
#Query to find AverageOrderValue
Avg_Order=dbSendQuery(mydb,'select sum(grand_total)/count(*) as AvgOrderValue from sales_flat_order where status="complete"')
Avg_Value=fetch(Avg_Order,n=-1)
Avg_Value=round(Avg_Value,2)
#Queryto find revenue
RevenueCal=dbSendQuery(mydb,'select sum(grand_total) from sales_flat_invoice')
Revenueval=fetch(RevenueCal,n=-1)
#Query to find tax amount
taxcal=dbSendQuery(mydb,"select sum(tax_amount) from sales_flat_invoice")
taxval=fetch(taxcal,n=-1)
#Query to find Repeatedcustomers
RepeatCust=dbSendQuery(mydb,'SELECT COUNT(*) AS grand_count FROM(
SELECT customer_email FROM sales_flat_order
WHERE sales_flat_order.status NOT LIKE "canceled"
AND sales_flat_order.status NOT LIKE "closed"
AND sales_flat_order.status NOT LIKE "fraud"
AND sales_flat_order.status NOT LIKE "holded"
AND sales_flat_order.status NOT LIKE "paypal_canceled_reversal"
GROUP BY customer_email HAVING COUNT(*) > 1
) s')
RepeatVal=fetch(RepeatCust,n=-1)
#Calculating E-Commerce Ratio
Visits=dbSendQuery(mydb,"select count(*) from log_visitor")
Visitsval=fetch(Visits,n=-1)
Transactions=dbSendQuery(mydb,"select count(*) from sales_flat_order where status='complete'")
TrValue=fetch(Transactions,n=-1)
ERatio=TrValue/Visitsval
##Revenue of a perticular month in all years
RevenueMarch=dbSendQuery(mydb,'select sum(grand_total) as Revenue ,Month(created_at) as Month,Year(created_at) as Year from sales_flat_order where Month(created_at) =3 group by  Year(created_at)')
RevenueMarchVal=fetch(RevenueMarch,n=-1)
##Sales of an item by location
saleLoc=dbSendQuery(mydb,'select sum(sales_flat_order.grand_total) as Revenue ,sales_flat_order_address.region as Location from
sales_flat_order,sales_flat_order_address where sales_flat_order.entity_id=sales_flat_order_address.parent_id group by
sales_flat_order_address.region,YEAR(sales_flat_order.created_at)=2015 order by (Month(sales_flat_order.created_at)=3)')
salelocval=fetch(saleLoc,n=-1)
##Sales of an item among  the year by location
saleLocY=dbSendQuery(mydb,'select sum(sales_flat_order.grand_total) as Revenue ,sales_flat_order_address.region as Location from
sales_flat_order,sales_flat_order_address where sales_flat_order.entity_id=sales_flat_order_address.parent_id group by
sales_flat_order_address.region order by (YEAR(sales_flat_order.created_at)=2015)')
salelocvaly=fetch(saleLocY,n=-1)
##Sales of an item among  all the years by location
saleLocYall=dbSendQuery(mydb,'select sum(sales_flat_order.grand_total) as Revenue ,sales_flat_order_address.region as Location from
sales_flat_order,sales_flat_order_address where sales_flat_order.entity_id=sales_flat_order_address.parent_id group by
sales_flat_order_address.region order by (YEAR(sales_flat_order.created_at))')
salelocvalyall=fetch(saleLocYall,n=-1)
##Revenue of items among all the years
yearwiserevenue=dbSendQuery(mydb,'select sum(grand_total) as Revenue ,
Month(created_at) as Month,
Year(created_at) as Year
from sales_flat_order
group by  Year
')
RevenueByYear=fetch(yearwiserevenue,n=-1)
##### Top Product Sold in March ####
ProductTop = dbSendQuery(mydb,'select sum(sales_flat_quote_item.qty) as TotalQty,
sales_flat_quote_item.product_id, sales_flat_quote_item.name
from sales_flat_quote_item,
sales_flat_order_item
where YEAR(sales_flat_quote_item.updated_at) = 2016 AND MONTH(sales_flat_quote_item.updated_at)=3 AND
sales_flat_quote_item.product_id = sales_flat_order_item.product_id
group by sales_flat_quote_item.product_id;')
topproduct= fetch(ProductTop, n=-1)
maxQty<-max(topproduct$TotalQty)
####inventory Turnover=Cost of Goods Sold  /  Average Inventory
turnover = dbSendQuery(mydb,'select sum(sales_flat_order.grand_total) as OrderTotal from
sales_flat_order,sales_flat_invoice
where
sales_flat_order.entity_id=sales_flat_invoice.order_id and
sales_flat_order.status="complete"')
Iturnover= fetch(turnover, n=-1)
inventurnover<-sum(Iturnover$OrderTotal)
###Revenue By Product Category
Rbycat=dbSendQuery(mydb,'SELECT sum(`qty`) as qty, sum(`total_price`) as Revenue, category_id FROM (SELECT sum(`qty_ordered`) as qty, sum(`row_total`) as total_price, sales_flat_order_item.product_id, catalog_category_product.category_id  FROM `sales_flat_order_item`
INNER JOIN catalog_category_product ON catalog_category_product.product_id = sales_flat_order_item.product_id
GROUP BY sales_flat_order_item.product_id order by catalog_category_product.category_id desc) as resTable GROUP BY category_id')
Rbycatval=fetch(Rbycat,n=-1)
######Inventory sales by location#####
Inventsales= dbSendQuery(mydb,'select sum(sales_flat_order.grand_total) as Revenue ,
sales_flat_order_address.region as Location,
(sales_flat_invoice.total_qty) as ordered_qunatity
from sales_flat_order,sales_flat_order_address,sales_flat_invoice
where sales_flat_order.entity_id=sales_flat_order_address.parent_id
and  sales_flat_order.entity_id=sales_flat_invoice.order_id
group by sales_flat_order_address.region')
InventsalesbyRegion = fetch(Inventsales, n=-1)
##### units per transaction of the month march  ########
TotalUnitSold = dbSendQuery(mydb,'select sum(sales_flat_invoice_item.qty) as TotalQty
from sales_flat_invoice_item,sales_flat_order,sales_flat_invoice
where YEAR(sales_flat_order.updated_at)=2016 and MONTH(sales_flat_order.updated_at)=3 and
sales_flat_order.entity_id = sales_flat_invoice.order_id and
sales_flat_invoice.entity_id=sales_flat_invoice_item.parent_id and
sales_flat_order.status="complete"')
TotalUnitsSold = fetch(TotalUnitSold, n=-1)
Transactions=dbSendQuery(mydb,'select count(*) from sales_flat_order where YEAR(updated_at)=2016 and MONTH(updated_at)=3 and status="complete";')
totalTransactions=fetch(Transactions,n=-1)
unitspertransaction<-TotalUnitsSold/totalTransactions
unitspertransaction<-round(unitspertransaction,2)
##### Visits per day ########
dVisits=dbSendQuery(mydb,"select count(*) from log_visitor where day(log_visitor.first_visit_at)=26 and month(log_visitor.first_visit_at)=3 and year(log_visitor.first_visit_at)=2016")
dVisitsperday=fetch(dVisits,n=-1)
load("H:/SLC_POC/RData")
runApp()
library("assertthat", lib.loc="~/R/win-library/3.3")
detach("package:assertthat", unload=TRUE)
library("backports", lib.loc="~/R/win-library/3.3")
detach("package:backports", unload=TRUE)
library("assertthat", lib.loc="~/R/win-library/3.3")
library("backports", lib.loc="~/R/win-library/3.3")
library("base64enc", lib.loc="~/R/win-library/3.3")
library("DBI", lib.loc="~/R/win-library/3.3")
library("digest", lib.loc="~/R/win-library/3.3")
library("dichromat", lib.loc="~/R/win-library/3.3")
library("curl", lib.loc="~/R/win-library/3.3")
library("colorspace", lib.loc="~/R/win-library/3.3")
library("caTools", lib.loc="~/R/win-library/3.3")
library("bitops", lib.loc="~/R/win-library/3.3")
library("bigdata", lib.loc="~/R/win-library/3.3")
library("BH", lib.loc="~/R/win-library/3.3")
library("eAnalytics", lib.loc="~/R/win-library/3.3")
library("e1071", lib.loc="~/R/win-library/3.3")
library("energyr", lib.loc="~/R/win-library/3.3")
library("evaluate", lib.loc="~/R/win-library/3.3")
library("formatR", lib.loc="~/R/win-library/3.3")
library("highr", lib.loc="~/R/win-library/3.3")
library("hexbin", lib.loc="~/R/win-library/3.3")
library("gtable", lib.loc="~/R/win-library/3.3")
library("httpuv", lib.loc="~/R/win-library/3.3")
library("htmlwidgets", lib.loc="~/R/win-library/3.3")
library("htmltools", lib.loc="~/R/win-library/3.3")
library("hms", lib.loc="~/R/win-library/3.3")
library("httr", lib.loc="~/R/win-library/3.3")
library("leaflet", lib.loc="~/R/win-library/3.3")
library("lazyeval", lib.loc="~/R/win-library/3.3")
library("labeling", lib.loc="~/R/win-library/3.3")
library("knitr", lib.loc="~/R/win-library/3.3")
library("jsonlite", lib.loc="~/R/win-library/3.3")
library("iterators", lib.loc="~/R/win-library/3.3")
library("munsell", lib.loc="~/R/win-library/3.3")
library("NB", lib.loc="~/R/win-library/3.3")
library("mime", lib.loc="~/R/win-library/3.3")
library("markdown", lib.loc="~/R/win-library/3.3")
library("magrittr", lib.loc="~/R/win-library/3.3")
library("plyr", lib.loc="~/R/win-library/3.3")
library("plotly", lib.loc="~/R/win-library/3.3")
library("openssl", lib.loc="~/R/win-library/3.3")
library("NLP", lib.loc="~/R/win-library/3.3")
library("Rcpp", lib.loc="~/R/win-library/3.3")
library("RColorBrewer", lib.loc="~/R/win-library/3.3")
library("rattle", lib.loc="~/R/win-library/3.3")
library("raster", lib.loc="~/R/win-library/3.3")
library("randomForest", lib.loc="~/R/win-library/3.3")
library("R6", lib.loc="~/R/win-library/3.3")
detach("package:R6", unload=TRUE)
library("R6", lib.loc="~/R/win-library/3.3")
library("purrr", lib.loc="~/R/win-library/3.3")
library("png", lib.loc="~/R/win-library/3.3")
library("rprojroot", lib.loc="~/R/win-library/3.3")
library("scales", lib.loc="~/R/win-library/3.3")
detach("package:scales", unload=TRUE)
library("scales", lib.loc="~/R/win-library/3.3")
library("RMySQL", lib.loc="~/R/win-library/3.3")
library("rmarkdown", lib.loc="~/R/win-library/3.3")
library("rjson", lib.loc="~/R/win-library/3.3")
library("rJava", lib.loc="~/R/win-library/3.3")
library("RGtk2", lib.loc="~/R/win-library/3.3")
library("RgoogleMaps", lib.loc="~/R/win-library/3.3")
library("reshape2", lib.loc="~/R/win-library/3.3")
library("sourcetools", lib.loc="~/R/win-library/3.3")
library("slam", lib.loc="~/R/win-library/3.3")
library("stringr", lib.loc="~/R/win-library/3.3")
library("stringi", lib.loc="~/R/win-library/3.3")
library("tibble", lib.loc="~/R/win-library/3.3")
library("tidyr", lib.loc="~/R/win-library/3.3")
library("tidyr", lib.loc="~/R/win-library/3.3")
library("tm", lib.loc="~/R/win-library/3.3")
library("XLConnectJars", lib.loc="~/R/win-library/3.3")
library("XLConnect", lib.loc="~/R/win-library/3.3")
library("wordcloud2", lib.loc="~/R/win-library/3.3")
detach("package:wordcloud2", unload=TRUE)
library("wordcloud2", lib.loc="~/R/win-library/3.3")
library("wordcloud", lib.loc="~/R/win-library/3.3")
library("xlsxjars", lib.loc="~/R/win-library/3.3")
library("xlsx", lib.loc="~/R/win-library/3.3")
library("yaml", lib.loc="~/R/win-library/3.3")
library("xtable", lib.loc="~/R/win-library/3.3")
library("grDevices", lib.loc="C:/Program Files/R/R-3.3.2/library")
library("graphics", lib.loc="C:/Program Files/R/R-3.3.2/library")
library("grid", lib.loc="C:/Program Files/R/R-3.3.2/library")
library("KernSmooth", lib.loc="C:/Program Files/R/R-3.3.2/library")
library("MASS", lib.loc="C:/Program Files/R/R-3.3.2/library")
library("methods", lib.loc="C:/Program Files/R/R-3.3.2/library")
library("tools", lib.loc="C:/Program Files/R/R-3.3.2/library")
library("tcltk", lib.loc="C:/Program Files/R/R-3.3.2/library")
install.packages("googleVis")
library("assertthat", lib.loc="~/R/win-library/3.3")
detach("package:assertthat", unload=TRUE)
library("assertthat", lib.loc="~/R/win-library/3.3")
library("backports", lib.loc="~/R/win-library/3.3")
library("base64enc", lib.loc="~/R/win-library/3.3")
library("BH", lib.loc="~/R/win-library/3.3")
library("bigdata", lib.loc="~/R/win-library/3.3")
library("bitops", lib.loc="~/R/win-library/3.3")
library("caTools", lib.loc="~/R/win-library/3.3")
library("colorspace", lib.loc="~/R/win-library/3.3")
library("curl", lib.loc="~/R/win-library/3.3")
library("DBI", lib.loc="~/R/win-library/3.3")
library("dichromat", lib.loc="~/R/win-library/3.3")
library("digest", lib.loc="~/R/win-library/3.3")
library("dplyr", lib.loc="~/R/win-library/3.3")
library(RMySQL)
library(shinydashboard)
library(shiny)
library(googleVis)
library(dplyr)
library(lubridate)
library(DT)
library(readr)
library(ggplot2)
mydb = dbConnect(MySQL(),user='readonly',password='readonly123',dbname='slcawdb',host='183.82.106.91')
#####
rs = dbSendQuery(mydb, 'select sales_flat_order.updated_at, sales_flat_order.store_id, sales_flat_order.status,
sales_flat_invoice.created_at, sales_flat_invoice.grand_total,
sales_flat_invoice_item.qty, sales_flat_invoice_item.name, sales_flat_invoice_item.price
from sales_flat_order,sales_flat_invoice,sales_flat_invoice_item
where sales_flat_order.entity_id=sales_flat_invoice.order_id
and  sales_flat_invoice_item.entity_id=sales_flat_invoice.entity_id
and sales_flat_order.status = "complete"')
data = fetch(rs, n=-1)
#Query to find AverageOrderValue
Avg_Order=dbSendQuery(mydb,'select sum(grand_total)/count(*) as AvgOrderValue from sales_flat_order where status="complete"')
Avg_Value=fetch(Avg_Order,n=-1)
Avg_Value=round(Avg_Value,2)
#Queryto find revenue
RevenueCal=dbSendQuery(mydb,'select sum(grand_total) from sales_flat_invoice')
Revenueval=fetch(RevenueCal,n=-1)
#Query to find tax amount
taxcal=dbSendQuery(mydb,"select sum(tax_amount) from sales_flat_invoice")
taxval=fetch(taxcal,n=-1)
#Query to find Repeatedcustomers
RepeatCust=dbSendQuery(mydb,'SELECT COUNT(*) AS grand_count FROM(
SELECT customer_email FROM sales_flat_order
WHERE sales_flat_order.status NOT LIKE "canceled"
AND sales_flat_order.status NOT LIKE "closed"
AND sales_flat_order.status NOT LIKE "fraud"
AND sales_flat_order.status NOT LIKE "holded"
AND sales_flat_order.status NOT LIKE "paypal_canceled_reversal"
GROUP BY customer_email HAVING COUNT(*) > 1
) s')
RepeatVal=fetch(RepeatCust,n=-1)
#Calculating E-Commerce Ratio
Visits=dbSendQuery(mydb,"select count(*) from log_visitor")
Visitsval=fetch(Visits,n=-1)
Transactions=dbSendQuery(mydb,"select count(*) from sales_flat_order where status='complete'")
TrValue=fetch(Transactions,n=-1)
ERatio=TrValue/Visitsval
##Revenue of a perticular month in all years
RevenueMarch=dbSendQuery(mydb,'select sum(grand_total) as Revenue ,Month(created_at) as Month,Year(created_at) as Year from sales_flat_order where Month(created_at) =3 group by  Year(created_at)')
RevenueMarchVal=fetch(RevenueMarch,n=-1)
##Sales of an item by location
saleLoc=dbSendQuery(mydb,'select sum(sales_flat_order.grand_total) as Revenue ,sales_flat_order_address.region as Location from
sales_flat_order,sales_flat_order_address where sales_flat_order.entity_id=sales_flat_order_address.parent_id group by
sales_flat_order_address.region,YEAR(sales_flat_order.created_at)=2015 order by (Month(sales_flat_order.created_at)=3)')
salelocval=fetch(saleLoc,n=-1)
##Sales of an item among  the year by location
saleLocY=dbSendQuery(mydb,'select sum(sales_flat_order.grand_total) as Revenue ,sales_flat_order_address.region as Location from
sales_flat_order,sales_flat_order_address where sales_flat_order.entity_id=sales_flat_order_address.parent_id group by
sales_flat_order_address.region order by (YEAR(sales_flat_order.created_at)=2015)')
salelocvaly=fetch(saleLocY,n=-1)
##Sales of an item among  all the years by location
saleLocYall=dbSendQuery(mydb,'select sum(sales_flat_order.grand_total) as Revenue ,sales_flat_order_address.region as Location from
sales_flat_order,sales_flat_order_address where sales_flat_order.entity_id=sales_flat_order_address.parent_id group by
sales_flat_order_address.region order by (YEAR(sales_flat_order.created_at))')
salelocvalyall=fetch(saleLocYall,n=-1)
##Revenue of items among all the years
yearwiserevenue=dbSendQuery(mydb,'select sum(grand_total) as Revenue ,
Month(created_at) as Month,
Year(created_at) as Year
from sales_flat_order
group by  Year
')
RevenueByYear=fetch(yearwiserevenue,n=-1)
##### Top Product Sold in March ####
ProductTop = dbSendQuery(mydb,'select sum(sales_flat_quote_item.qty) as TotalQty,
sales_flat_quote_item.product_id, sales_flat_quote_item.name
from sales_flat_quote_item,
sales_flat_order_item
where YEAR(sales_flat_quote_item.updated_at) = 2016 AND MONTH(sales_flat_quote_item.updated_at)=3 AND
sales_flat_quote_item.product_id = sales_flat_order_item.product_id
group by sales_flat_quote_item.product_id;')
topproduct= fetch(ProductTop, n=-1)
maxQty<-max(topproduct$TotalQty)
####inventory Turnover=Cost of Goods Sold  /  Average Inventory
turnover = dbSendQuery(mydb,'select sum(sales_flat_order.grand_total) as OrderTotal from
sales_flat_order,sales_flat_invoice
where
sales_flat_order.entity_id=sales_flat_invoice.order_id and
sales_flat_order.status="complete"')
Iturnover= fetch(turnover, n=-1)
inventurnover<-sum(Iturnover$OrderTotal)
###Revenue By Product Category
Rbycat=dbSendQuery(mydb,'SELECT sum(`qty`) as qty, sum(`total_price`) as Revenue, category_id FROM (SELECT sum(`qty_ordered`) as qty, sum(`row_total`) as total_price, sales_flat_order_item.product_id, catalog_category_product.category_id  FROM `sales_flat_order_item`
INNER JOIN catalog_category_product ON catalog_category_product.product_id = sales_flat_order_item.product_id
GROUP BY sales_flat_order_item.product_id order by catalog_category_product.category_id desc) as resTable GROUP BY category_id')
Rbycatval=fetch(Rbycat,n=-1)
######Inventory sales by location#####
Inventsales= dbSendQuery(mydb,'select sum(sales_flat_order.grand_total) as Revenue ,
sales_flat_order_address.region as Location,
(sales_flat_invoice.total_qty) as ordered_qunatity
from sales_flat_order,sales_flat_order_address,sales_flat_invoice
where sales_flat_order.entity_id=sales_flat_order_address.parent_id
and  sales_flat_order.entity_id=sales_flat_invoice.order_id
group by sales_flat_order_address.region')
InventsalesbyRegion = fetch(Inventsales, n=-1)
##### units per transaction of the month march  ########
TotalUnitSold = dbSendQuery(mydb,'select sum(sales_flat_invoice_item.qty) as TotalQty
from sales_flat_invoice_item,sales_flat_order,sales_flat_invoice
where YEAR(sales_flat_order.updated_at)=2016 and MONTH(sales_flat_order.updated_at)=3 and
sales_flat_order.entity_id = sales_flat_invoice.order_id and
sales_flat_invoice.entity_id=sales_flat_invoice_item.parent_id and
sales_flat_order.status="complete"')
TotalUnitsSold = fetch(TotalUnitSold, n=-1)
Transactions=dbSendQuery(mydb,'select count(*) from sales_flat_order where YEAR(updated_at)=2016 and MONTH(updated_at)=3 and status="complete";')
totalTransactions=fetch(Transactions,n=-1)
unitspertransaction<-TotalUnitsSold/totalTransactions
unitspertransaction<-round(unitspertransaction,2)
##### Visits per day ########
dVisits=dbSendQuery(mydb,"select count(*) from log_visitor where day(log_visitor.first_visit_at)=26 and month(log_visitor.first_visit_at)=3 and year(log_visitor.first_visit_at)=2016")
dVisitsperday=fetch(dVisits,n=-1)
library("formatR", lib.loc="~/R/win-library/3.3")
library("evaluate", lib.loc="~/R/win-library/3.3")
library("energyr", lib.loc="~/R/win-library/3.3")
library("eAnalytics", lib.loc="~/R/win-library/3.3")
library("e1071", lib.loc="~/R/win-library/3.3")
library("hms", lib.loc="~/R/win-library/3.3")
library("htmltools", lib.loc="~/R/win-library/3.3")
library("htmlwidgets", lib.loc="~/R/win-library/3.3")
library("httpuv", lib.loc="~/R/win-library/3.3")
detach("package:httpuv", unload=TRUE)
library("httpuv", lib.loc="~/R/win-library/3.3")
detach("package:httpuv", unload=TRUE)
library("httpuv", lib.loc="~/R/win-library/3.3")
library("httr", lib.loc="~/R/win-library/3.3")
library("iterators", lib.loc="~/R/win-library/3.3")
library("jsonlite", lib.loc="~/R/win-library/3.3")
library("knitr", lib.loc="~/R/win-library/3.3")
library("labeling", lib.loc="~/R/win-library/3.3")
library("lazyeval", lib.loc="~/R/win-library/3.3")
library("leaflet", lib.loc="~/R/win-library/3.3")
library("magrittr", lib.loc="~/R/win-library/3.3")
library("markdown", lib.loc="~/R/win-library/3.3")
library("mime", lib.loc="~/R/win-library/3.3")
library("munsell", lib.loc="~/R/win-library/3.3")
library("NB", lib.loc="~/R/win-library/3.3")
library("NLP", lib.loc="~/R/win-library/3.3")
library("openssl", lib.loc="~/R/win-library/3.3")
library("plotly", lib.loc="~/R/win-library/3.3")
library("plyr", lib.loc="~/R/win-library/3.3")
library("png", lib.loc="~/R/win-library/3.3")
library("purrr", lib.loc="~/R/win-library/3.3")
library("R6", lib.loc="~/R/win-library/3.3")
library("raster", lib.loc="~/R/win-library/3.3")
detach("package:raster", unload=TRUE)
library("rattle", lib.loc="~/R/win-library/3.3")
library("raster", lib.loc="~/R/win-library/3.3")
library("RColorBrewer", lib.loc="~/R/win-library/3.3")
library("Rcpp", lib.loc="~/R/win-library/3.3")
detach("package:Rcpp", unload=TRUE)
library("reshape2", lib.loc="~/R/win-library/3.3")
library("Rcpp", lib.loc="~/R/win-library/3.3")
library("RgoogleMaps", lib.loc="~/R/win-library/3.3")
library("RGtk2", lib.loc="~/R/win-library/3.3")
library("rJava", lib.loc="~/R/win-library/3.3")
library("rjson", lib.loc="~/R/win-library/3.3")
library("sourcetools", lib.loc="~/R/win-library/3.3")
library("slam", lib.loc="~/R/win-library/3.3")
library("scales", lib.loc="~/R/win-library/3.3")
library("rprojroot", lib.loc="~/R/win-library/3.3")
library("RMySQL", lib.loc="~/R/win-library/3.3")
library("rmarkdown", lib.loc="~/R/win-library/3.3")
detach("package:rmarkdown", unload=TRUE)
library("rmarkdown", lib.loc="~/R/win-library/3.3")
detach("package:rmarkdown", unload=TRUE)
library("rmarkdown", lib.loc="~/R/win-library/3.3")
library("yaml", lib.loc="~/R/win-library/3.3")
library("xtable", lib.loc="~/R/win-library/3.3")
detach("package:xtable", unload=TRUE)
library("xtable", lib.loc="~/R/win-library/3.3")
library("xlsxjars", lib.loc="~/R/win-library/3.3")
library("xlsx", lib.loc="~/R/win-library/3.3")
library("XLConnectJars", lib.loc="~/R/win-library/3.3")
library("XLConnect", lib.loc="~/R/win-library/3.3")
detach("package:XLConnect", unload=TRUE)
library("XLConnect", lib.loc="~/R/win-library/3.3")
library("wordcloud2", lib.loc="~/R/win-library/3.3")
library("wordcloud", lib.loc="~/R/win-library/3.3")
library("viridisLite", lib.loc="~/R/win-library/3.3")
library("tm", lib.loc="~/R/win-library/3.3")
library("tidyr", lib.loc="~/R/win-library/3.3")
library("tibble", lib.loc="~/R/win-library/3.3")
library("tidyr", lib.loc="~/R/win-library/3.3")
detach("package:tidyr", unload=TRUE)
library("tidyr", lib.loc="~/R/win-library/3.3")
library("stringi", lib.loc="~/R/win-library/3.3")
library("stringr", lib.loc="~/R/win-library/3.3")
library("boot", lib.loc="C:/Program Files/R/R-3.3.2/library")
library("class", lib.loc="C:/Program Files/R/R-3.3.2/library")
library("cluster", lib.loc="C:/Program Files/R/R-3.3.2/library")
library("codetools", lib.loc="C:/Program Files/R/R-3.3.2/library")
library("compiler", lib.loc="C:/Program Files/R/R-3.3.2/library")
library("datasets", lib.loc="C:/Program Files/R/R-3.3.2/library")
library("foreign", lib.loc="C:/Program Files/R/R-3.3.2/library")
library("graphics", lib.loc="C:/Program Files/R/R-3.3.2/library")
library("grDevices", lib.loc="C:/Program Files/R/R-3.3.2/library")
library("grid", lib.loc="C:/Program Files/R/R-3.3.2/library")
library("KernSmooth", lib.loc="C:/Program Files/R/R-3.3.2/library")
library("MASS", lib.loc="C:/Program Files/R/R-3.3.2/library")
library("methods", lib.loc="C:/Program Files/R/R-3.3.2/library")
detach("package:methods", unload=TRUE)
library("mgcv", lib.loc="C:/Program Files/R/R-3.3.2/library")
library("methods", lib.loc="C:/Program Files/R/R-3.3.2/library")
library("nnet", lib.loc="C:/Program Files/R/R-3.3.2/library")
library("parallel", lib.loc="C:/Program Files/R/R-3.3.2/library")
library("rpart", lib.loc="C:/Program Files/R/R-3.3.2/library")
library("spatial", lib.loc="C:/Program Files/R/R-3.3.2/library")
library("splines", lib.loc="C:/Program Files/R/R-3.3.2/library")
library("stats", lib.loc="C:/Program Files/R/R-3.3.2/library")
detach("package:stats", unload=TRUE)
library("stats", lib.loc="C:/Program Files/R/R-3.3.2/library")
library("stats4", lib.loc="C:/Program Files/R/R-3.3.2/library")
library("survival", lib.loc="C:/Program Files/R/R-3.3.2/library")
library("tcltk", lib.loc="C:/Program Files/R/R-3.3.2/library")
library("tools", lib.loc="C:/Program Files/R/R-3.3.2/library")
detach("package:tools", unload=TRUE)
library("tools", lib.loc="C:/Program Files/R/R-3.3.2/library")
library("translations", lib.loc="C:/Program Files/R/R-3.3.2/library")
library("utils", lib.loc="C:/Program Files/R/R-3.3.2/library")
runApp()
runApp()
